import arcpy
from arcpy import env
import numpy as np
import os
import time

######### Define parameters
usngCellsGDB = arcpy.GetParameterAsText(0) ## The GDB that stores the enriched USNGS cells. Each cell includes the ACS demographic data
GridCellsSize = arcpy.GetParameterAsText(1) ## Either 1 or 5 (km)
hazardExtent = arcpy.GetParameterAsText(2) ## Hazard Extent
outputGDB = arcpy.GetParameterAsText(3) ## The GDB that will store the output


### NOTE- parameters #4 - 17 store the weights of the social vulnerability criteria####

arcpy.env.workspace = outputGDB
arcpy.env.overwriteOutput = True

usngCells =  usngCellsGDB + "/USNG" + GridCellsSize + "KM_FullACS17"## The name of USNG feautre class

GridCellsName = "usng" + GridCellsSize + "km" ## The name of the field that stores a unique name of the USNG cell


arcpy.management.MakeFeatureLayer(usngCells, "USNGLyr")
arcpy.management.MakeFeatureLayer(hazardExtent, "hazardExtentyr")

## Select the USNG cells that intersect with the affected parcels
arcpy.management.SelectLayerByLocation("USNGLyr", "INTERSECT", "hazardExtentyr", None, "NEW_SELECTION", "NOT_INVERT")
arcpy.management.CopyFeatures("USNGLyr", outputGDB + "/usngOverParcels")
arcpy.management.MakeFeatureLayer(outputGDB + "/usngOverParcels", "usngOverParcelsLyr", None, None,None)

###########SOCIAL VULNERABILITY###############

arcpy.AddField_management("usngOverParcelsLyr", "TotalPopScore", "SHORT")## A field that will store for each cell the sum percentile rank value of all the SV properties 
##arcpy.AddField_management("usngOverParcelsLyr", "SV_Score_Rank_NonWeighted", "SHORT") ## A field that will store for each cell the relative percentile rank of the cells relative to all the affected cells
arcpy.AddField_management("usngOverParcelsLyr", "TotalPopScoreWeighted", "SHORT") ## A field that will store for each cell the WEIGHTED sum percentile rank value of all the SV properties(weighted by the weight in the parameters)
arcpy.AddField_management("usngOverParcelsLyr", "SV_Score_Rank_Weighted", "SHORT") ## A field that will store for each cell the relative percentile rank of the cells (weighted) 

## A constant list of the social vulnerability properties, in the order put in the parameters
listofFeatures = ["pop","households", "housingunits", "pop65over", "pop16overunemployed", "pop16overnotinlaborforce", "popamindianalaskan", "householdsinpoverty", "householdsdsfs", "householdsdsnofs",
                  "householdswithfs", "householdswithpa", "housingunitsmobilehomes"]

uiParamsBeforeFeatures = 4 ## we have (in the tool`s parameter list) 4 parameters before the first social vulnerability parameter

## Define a dictionary that will store an index number and the weight of the parameter
weightParamDict = {} 
for (ii, item) in enumerate(listofFeatures):
    weightParamDict[item] = int(arcpy.GetParameterAsText(ii + uiParamsBeforeFeatures))


use_parameter_list = []

for item in weightParamDict.keys():
    if weightParamDict[item] > 0:
        use_parameter_list.append(item)
        
for item in use_parameter_list:
    arcpy.AddField_management("usngOverParcelsLyr", item+"C", "SHORT")
    
for item in use_parameter_list:
    arrp = arcpy.da.FeatureClassToNumPyArray("usngOverParcelsLyr", item)
    arr = np.array(arrp,np.float)
    p1 = np.percentile(arr, 20)
    p2 = np.percentile(arr, 30)
    p3 = np.percentile(arr, 40)
    p4 = np.percentile(arr, 50)
    p5 = np.percentile(arr, 60)
    p6 = np.percentile(arr, 70)
    p7 = np.percentile(arr, 80)
    p8 = np.percentile(arr, 90)
    p9 = np.percentile(arr, 95)

    with arcpy.da.UpdateCursor("usngOverParcelsLyr", [item, item+"C"]) as cursor:
        for row in cursor:
            if row[0] <= p1:
                row[1] = 1
            elif p1 <= row[0] and row[0] < p2:    
                row[1] = 2
            elif p2 <= row[0] and row[0] < p3:     
                row[1] = 3
            elif p3 <= row[0] and row[0] < p4:    
                row[1] = 4
            elif p4 <= row[0] and row[0] < p5:    
                row[1] = 5
            elif p5 <= row[0] and row[0] < p6:
                row[1] = 6
            elif p6 <= row[0] and row[0] < p7:    
                row[1] = 7
            elif p7 <= row[0] and row[0] < p8:
                row[1] = 8
            elif p8 <= row[0] and row[0] < p9:
                row[1] = 9
            else:    
                row[1] = 10
            cursor.updateRow(row)

forCalcSumCmdStr = ' + '.join(['!%sC!' % item for item in use_parameter_list])
arcpy.management.CalculateField("usngOverParcelsLyr", "TotalPopScore", forCalcSumCmdStr, "PYTHON3", None)


forCalcWeightedSumCmdStr = ' + '.join(['!%sC! * %d' % (item,weightParamDict[item]) for item in use_parameter_list])
arcpy.management.CalculateField("usngOverParcelsLyr", "TotalPopScoreWeighted", forCalcWeightedSumCmdStr, "PYTHON3", None)

arrp = arcpy.da.FeatureClassToNumPyArray("usngOverParcelsLyr", "TotalPopScoreWeighted")
arr = np.array(arrp,np.float)
p1 = np.percentile(arr, 20)
p2 = np.percentile(arr, 30)
p3 = np.percentile(arr, 40)
p4 = np.percentile(arr, 50)
p5 = np.percentile(arr, 60)
p6 = np.percentile(arr, 70)
p7 = np.percentile(arr, 80)
p8 = np.percentile(arr, 90)
p9 = np.percentile(arr, 95)

with arcpy.da.UpdateCursor("usngOverParcelsLyr", ['TotalPopScoreWeighted', 'SV_Score_Rank_Weighted']) as cursor:
    for row in cursor:
        if row[0] < p1:
            row[1] = 1
        elif p1 <= row[0] and row[0] < p2:    
            row[1] = 2
        elif p2 <= row[0] and row[0] < p3:     
            row[1] = 3
        elif p3 <= row[0] and row[0] < p4:    
            row[1] = 4
        elif p4 <= row[0] and row[0] < p5:    
            row[1] = 5
        elif p5 <= row[0] and row[0] < p6:
            row[1] = 6
        elif p6 <= row[0] and row[0] < p7:    
            row[1] = 7
        elif p7 <= row[0] and row[0] < p8:
            row[1] = 8
        elif p8 <= row[0] and row[0] < p9:
            row[1] = 9
        else:    
            row[1] = 10
        cursor.updateRow(row)

arcpy.AddField_management("usngOverParcelsLyr", "Collection_Priority_Weighted", "SHORT")

arcpy.management.SelectLayerByAttribute("usngOverParcelsLyr", "NEW_SELECTION", "SV_Score_Rank_Weighted <= 3", None)
arcpy.management.CalculateField("usngOverParcelsLyr", "Collection_Priority_Weighted", 3, "PYTHON3", None)

arcpy.management.SelectLayerByAttribute("usngOverParcelsLyr", "NEW_SELECTION", "SV_Score_Rank_Weighted > 3 And SV_Score_Rank_Weighted <= 7", None)
arcpy.management.CalculateField("usngOverParcelsLyr", "Collection_Priority_Weighted", 2, "PYTHON3", None)

arcpy.management.SelectLayerByAttribute("usngOverParcelsLyr", "NEW_SELECTION", "SV_Score_Rank_Weighted >= 8 And SV_Score_Rank_Weighted <= 10", None)
arcpy.management.CalculateField("usngOverParcelsLyr", "Collection_Priority_Weighted", 1, "PYTHON3", None)

arcpy.management.SelectLayerByAttribute("usngOverParcelsLyr", "CLEAR_SELECTION", None, None)

## Clean fields

for item in use_parameter_list:
    arcpy.management.DeleteField("usngOverParcelsLyr", item + "C")

todayIs = time.strftime('%m_%d_%y')
arcpy.management.CopyFeatures("usngOverParcelsLyr", "USNG" + "_" + GridCellsSize + "KM" + "CellsWithPriorities_" + todayIs , None, None, None, None)


draftFileName = outputGDB + "\AOI_Tasker_Parameters_" + todayIs+ ".txt"
draftFile = open(draftFileName, 'w')
test =draftFile.write("today is:%s" % todayIs)

